generator kysely {
    provider = "prisma-kysely"

    // Optionally provide a destination directory for the generated file
    // and a filename of your choice
    output = "../db"
    fileName = "types.ts"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum Visibility {
  PUBLIC
  PRIVATE
  UNLISTED
}

model User {
  id           BigInt        @id @default(autoincrement())
  publicId     String        @unique
  firebaseId   String        @unique
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  lastSeen     DateTime?
  email        String        @unique
  firstName    String?
  lastName     String?
  photoURL     String
  projects     Project[]
  cads         Cad[]
  comments     Comment[]
  access       Access[]
  commentsRead CommentRead[]
}

model Project {
  id          BigInt   @id @default(autoincrement())
  publicId    String   @unique
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  description String
  homeLong    Float
  homeLat     Float

  owner   User   @relation(fields: [ownerId], references: [id])
  ownerId BigInt

  cadsUsed Cad[]

  comments Comment[]

  blanketAccess AccessLevel
  blanketAccessGranted Boolean @default(false)

  grantedAccess Access[]

  @@index([ownerId])
}

model Cad {
  id          BigInt    @id @default(autoincrement())
  publicId    String    @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  name        String
  description String
  size        Float
  long        Float
  lat         Float
  filename    String
  owner       User      @relation(fields: [ownerId], references: [id])
  ownerId     BigInt
  projects    Project[]

  @@index([ownerId])
}

model Comment {
  id     BigInt  @id @default(autoincrement())
  isRoot Boolean @default(true)

  parentId BigInt?
  parent   Comment?  @relation("Parent", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children Comment[] @relation("Parent")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  text      String

  long Float
  lat  Float

  toLong Float
  toLat  Float

  author   User   @relation(fields: [authorId], references: [id])
  authorId BigInt

  project   Project @relation(fields: [projectId], references: [id])
  projectId BigInt

  readBy CommentRead[]

  @@index([authorId])
  @@index([projectId])
  @@index([parentId])
}

model CommentRead {
  id        BigInt   @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  comment   Comment @relation(fields: [commentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  commentId BigInt

  user   User   @relation(fields: [userId], references: [id])
  userId BigInt

  @@index([commentId])
  @@index([userId])
}

enum AccessLevel {
  READ
  COMMENT
  WRITE
}

enum AccessStatus {
  ACTIVE
  REVOKED
}

model Access {
  id        BigInt   @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  status AccessStatus

  level AccessLevel

  user   User   @relation(fields: [userId], references: [id])
  userId BigInt

  project   Project @relation(fields: [projectId], references: [id])
  projectId BigInt

  @@index([userId])
  @@index([projectId])
}
